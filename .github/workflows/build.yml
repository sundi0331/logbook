name: Build

on: push

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  REGISTRY_URL: ghcr.io
  IMAGE_TAG: 0.1.0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.WORKFLOW_TOKEN }}
      
      - name: Docker build
        run: |
          docker buildx build -f Dockerfile \
            -t ${{ env.REGISTRY_URL }}/${{ github.repository }}:${{ env.IMAGE_TAG }} \
            --label "org.opencontainers.image.created=$(date -u --iso-8601=seconds)" \
            --label "org.opencontainers.image.authors=${{ github.actor }}" \
            --label "org.opencontainers.image.url=${{ github.repositoryUrl }}" \
            --label "org.opencontainers.image.documentation=${{ github.repositoryUrl }}" \
            --label "org.opencontainers.image.source=${{ github.repositoryUrl }}" \
            --label "org.opencontainers.image.version=${{ env.IMAGE_TAG }}" \
            --label "org.opencontainers.image.revision=${{ github.sha }}" \
            --label "org.opencontainers.image.title=${{ github.event.repository.name }}" \
            .

      - name: Docker push
        run: docker push ${{ env.REGISTRY_URL }}/${{ github.repository }}:${{ env.IMAGE_TAG }}

      - name: Install cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.11.0'

      - name: Fetch signing key
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        run: echo $COSIGN_PRIVATE_KEY | base64 -d > cosign.key

      - name: Sign the docker image
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: cosign sign --key cosign.key ${{ env.REGISTRY_URL }}/${{ github.repository }}:${{ env.IMAGE_TAG }}

      - name: Remove signing key
        run: rm cosign.key

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY_URL }}/${{ github.repository }}:${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
